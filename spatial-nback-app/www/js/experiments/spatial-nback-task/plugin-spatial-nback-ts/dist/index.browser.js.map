{"version":3,"file":"index.browser.js","sources":["../package.json","../src/index.ts"],"sourcesContent":["{\r\n  \"name\": \"plugin-spatial-nback-ts\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"spatial grid n-back task\",\r\n  \"type\": \"module\",\r\n  \"main\": \"dist/index.cjs\",\r\n  \"exports\": {\r\n    \"import\": \"./dist/index.js\",\r\n    \"require\": \"./dist/index.cjs\"\r\n  },\r\n  \"typings\": \"dist/index.d.ts\",\r\n  \"unpkg\": \"dist/index.browser.min.js\",\r\n  \"files\": [\r\n    \"src\",\r\n    \"dist\"\r\n  ],\r\n  \"source\": \"src/index.ts\",\r\n  \"scripts\": {\r\n    \"test\": \"jest\",\r\n    \"test:watch\": \"npm test -- --watch\",\r\n    \"tsc\": \"tsc\",\r\n    \"build\": \"rollup --config\",\r\n    \"build:watch\": \"npm run build -- --watch\"\r\n  },\r\n  \"repository\": {\r\n    \"type\": \"git\",\r\n    \"url\": \"https://github.com/ahfarhat/JsPsychTemplates/\",\r\n    \"directory\": \"\"\r\n  },\r\n  \"keywords\": [\r\n    \"jsPsych\"\r\n  ],\r\n  \"author\": {\r\n    \"name\": \"A. Hunter Farhat\",\r\n    \"url\": \"github.com/ahfarhat\"\r\n  },\r\n  \"license\": \"MIT\",\r\n  \"bugs\": {\r\n    \"url\": \"https://github.com/ahfarhat/JsPsychTemplates//issues\"\r\n  },\r\n  \"homepage\": \"/plugin-spatial-nback-ts/README.md\",\r\n  \"dependencies\": {\r\n    \"@citation-js/core\": \"^0.7.14\",\r\n    \"@citation-js/plugin-bibtex\": \"^0.7.14\",\r\n    \"@citation-js/plugin-cff\": \"^0.6.1\",\r\n    \"@citation-js/plugin-software-formats\": \"^0.6.1\",\r\n    \"jspsych\": \"^8.2.1\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@jspsych/config\": \"^3.2.2\",\r\n    \"@jspsych/test-utils\": \"^1.0.0\"\r\n  }\r\n}\r\n","import { JsPsych, JsPsychPlugin, ParameterType, TrialType } from \"jspsych\";\r\n\r\nimport { version } from \"../package.json\";\r\n\r\nconst info = <const>{\r\n  name: \"plugin-spatial-nback-ts\",\r\n  version: version,\r\n  parameters: {\r\n      /** Number of rows in the spatial grid */\r\n      rows: {\r\n        type: ParameterType.INT,\r\n        default: 3,\r\n      },\r\n      /** Number of columns in the spatial grid */\r\n      cols: {\r\n        type: ParameterType.INT,\r\n        default: 3,\r\n      },\r\n      /** Size of each cell in pixels, this will affect size of whole grid also */\r\n      cell_size: {\r\n        type: ParameterType.INT,\r\n        default: 100,\r\n      },\r\n      /** Row position of the stimulus (0-indexed) */\r\n      stimulus_row: {\r\n        type: ParameterType.INT,\r\n        default: 0,\r\n      },\r\n      /** Column position of the stimulus (0-indexed) */\r\n      stimulus_col: {\r\n        type: ParameterType.INT,\r\n        default: 0,\r\n      },\r\n      /** Whether this trial is a target trial */\r\n      is_target: {\r\n        type: ParameterType.BOOL,\r\n        default: false,\r\n      },\r\n      /** Duration the stimulus is displayed (ms) */\r\n      stimulus_duration: {\r\n        type: ParameterType.INT,\r\n        default: 500,\r\n      },\r\n      /** Inter-stimulus interval (ms) */\r\n      // I recommend using feedback_duration as ISI if you have any type of feedback showing\r\n      isi_duration: {\r\n        type: ParameterType.INT,\r\n        default: 1000,\r\n      },\r\n      /** Duration of feedback display (ms) */\r\n      feedback_duration: {\r\n        type: ParameterType.INT,\r\n        default: 500,\r\n      },\r\n      /** Whether to show feedback \"Incorrect! (231ms)\" after response */\r\n      show_feedback_time: {\r\n        type: ParameterType.BOOL,\r\n        default: true,\r\n      },\r\n      /** Whether to show feedback border around the grid */\r\n      show_feedback_border: {\r\n        type: ParameterType.BOOL,\r\n        default: true,\r\n      },\r\n      /** Whether to show feedback when there is no response */\r\n      showFeedbackNoResponse: {\r\n        type: ParameterType.BOOL,\r\n        default: true,\r\n      },\r\n      /** Whether to wait for feedback duration before ending trial when no response */\r\n      /** if using feedback_duration as interstimulus response, keep this true */\r\n      feedbackWaitNoResponse: {\r\n        type: ParameterType.BOOL,\r\n        default: true,\r\n      },\r\n      /** Text for the response button */\r\n      button_text: {\r\n        type: ParameterType.STRING,\r\n        default: \"\",\r\n      },\r\n      /** Color of the stimulus square */\r\n      stimulus_color: {\r\n        type: ParameterType.STRING,\r\n        default: \"#0066cc\",\r\n      },\r\n      /** Color of correct feedback border */\r\n      correct_color: {\r\n        type: ParameterType.STRING,\r\n        default: \"#00cc00\",\r\n      },\r\n      /** Color of incorrect feedback border */\r\n      incorrect_color: {\r\n        type: ParameterType.STRING,\r\n        default: \"#cc0000\",\r\n      },\r\n      /** Instructions to display above the grid */\r\n      instructions: {\r\n        type: ParameterType.STRING,\r\n        default: \"Click MATCH when this is a target trial.\",\r\n      },\r\n    },\r\n    data: {\r\n      /** Row position of the stimulus */\r\n      stimulus_row: {\r\n        type: ParameterType.INT,\r\n      },\r\n      /** Column position of the stimulus */\r\n      stimulus_col: {\r\n        type: ParameterType.INT,\r\n      },\r\n      /** Whether this trial was a target */\r\n      is_target: {\r\n        type: ParameterType.BOOL,\r\n      },\r\n      /** Whether participant responded */\r\n      response: {\r\n        type: ParameterType.BOOL,\r\n      },\r\n      /** Response time in milliseconds */\r\n      response_time: {\r\n        type: ParameterType.INT,\r\n      },\r\n      /** Whether the response was correct */\r\n      correct: {\r\n        type: ParameterType.BOOL,\r\n      },\r\n    },\r\n  citations: '__CITATIONS__',\r\n};\r\n\r\ntype Info = typeof info;\r\n\r\n/**\r\n * **plugin-spatial-nback-ts**\r\n *\r\n * Single trial spatial grid stimulus with response collection\r\n *\r\n * @author A. Hunter Farhat\r\n * @version 1.0.0\r\n * @see {@link https://github.com/farhat60/JsPsychTemplates/blob/main/plugin-spatial-nback-ts}\r\n */\r\nclass SpatialNbackTsPlugin implements JsPsychPlugin<Info> {\r\n  static info = info;\r\n\r\n  constructor(private jsPsych: JsPsych) {}\r\n\r\n  trial(display_element: HTMLElement, trial: TrialType<Info>) {\r\n    let trial_start_time: number;\r\n    let response_allowed = false;\r\n    let response_given = false;\r\n    let stimulus_timeout: number;\r\n    let isi_timeout: number;\r\n    let stimulus_hidden = false; // Track if stimulus has been hidden\r\n\r\n    // Generate random position if not specified\r\n    const stimulus_row = trial.stimulus_row ?? Math.floor(Math.random() * trial.rows);\r\n    const stimulus_col = trial.stimulus_col ?? Math.floor(Math.random() * trial.cols);\r\n\r\n    const createDisplay = (): void => {\r\n      let html = `\r\n        <div id=\"nback-container\" style=\"\r\n          position: fixed;\r\n          top: 50%;\r\n          left: 50%;\r\n          transform: translate(-50%, -50%);\r\n          width: 100vw;\r\n          height: 100vh;\r\n          display: flex;\r\n          flex-direction: column;\r\n          justify-content: center;\r\n          align-items: center;\r\n          font-family: Arial, sans-serif;\r\n          box-sizing: border-box;\r\n          padding: 20px;\r\n        \">`;\r\n      \r\n      // Instructions\r\n      html += `<div id=\"nback-instructions\" style=\"\r\n        position: absolute;\r\n        top: 15vh;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        width: 80%;\r\n        max-width: 520px;\r\n        text-align: center;\r\n        font-size: clamp(14px, 2vmin, 18px);\r\n        z-index: 10;\r\n      \">${trial.instructions}</div>`;\r\n\r\n      // Calculate grid size to fit screen\r\n      const grid_size = Math.min(50, 80 / Math.max(trial.rows, trial.cols));\r\n      const cell_size = `${grid_size / Math.max(trial.rows, trial.cols)}vmin`;\r\n\r\n      // Grid - centered and responsive\r\n      html += `<div id=\"nback-grid\" style=\"\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        border: 2px solid #000;\r\n        box-sizing: border-box;\r\n        display: inline-block;\r\n        z-index: 5;\r\n      \">`;\r\n      \r\n      for (let row = 0; row < trial.rows; row++) {\r\n        html += '<div style=\"display: flex;\">';\r\n        for (let col = 0; col < trial.cols; col++) {\r\n          html += `<div id=\"cell-${row}-${col}\" style=\"\r\n            width: ${cell_size};\r\n            height: ${cell_size};\r\n            border: 1px solid #ccc;\r\n            background-color: white;\r\n            box-sizing: border-box;\r\n            min-width: ${Math.max(40, trial.cell_size * 0.5)}px;\r\n            min-height: ${Math.max(40, trial.cell_size * 0.5)}px;\r\n          \"></div>`;\r\n        }\r\n        html += '</div>';\r\n      }\r\n      html += '</div>';\r\n\r\n      // Response button\r\n      html += `<div id=\"nback-button-container\" style=\"\r\n        position: absolute;\r\n        bottom: 15vh;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        z-index: 10;\r\n      \">`;\r\n      html += `<button id=\"nback-response-btn\" style=\"\r\n        font-size: clamp(18px, 3vmin, 26px);\r\n        padding: clamp(18px, 2.5vmin, 30px) clamp(35px, 5vmin, 60px);\r\n        background-color: #2196F3;\r\n        color: white;\r\n        border: none;\r\n        border-radius: 8px;\r\n        cursor: pointer;\r\n        font-weight: bold;\r\n        box-shadow: 0 4px 8px rgba(0,0,0,0.2);\r\n        transition: all 0.2s;\r\n      \" disabled>${trial.button_text}</button>`;\r\n      html += '</div>';\r\n      \r\n      // Feedback area\r\n      html += `<div id=\"nback-feedback\" style=\"\r\n        position: absolute;\r\n        bottom: 8vh;\r\n        left: 50%;\r\n        transform: translateX(-50%);\r\n        height: 40px;\r\n        font-size: clamp(14px, 2vmin, 20px);\r\n        font-weight: bold;\r\n        text-align: center;\r\n        z-index: 10;\r\n        width: 80%;\r\n      \"></div>`;\r\n      \r\n      html += '</div>';\r\n      \r\n      display_element.innerHTML = html;\r\n\r\n      // Add button hover effects and event listener\r\n      const button = document.getElementById('nback-response-btn') as HTMLButtonElement;\r\n      button.addEventListener('mouseenter', () => {\r\n        if (!button.disabled) {\r\n          button.style.backgroundColor = '#1976D2';\r\n          button.style.transform = 'translateY(-2px)';\r\n        }\r\n      });\r\n      button.addEventListener('mouseleave', () => {\r\n        button.style.backgroundColor = '#2196F3';\r\n        button.style.transform = 'translateY(0)';\r\n      });\r\n      button.addEventListener('click', handleResponse);\r\n    };\r\n\r\n    const startTrial = (): void => {\r\n      // Show stimulus\r\n      const cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\r\n      cell.style.backgroundColor = trial.stimulus_color;\r\n\r\n      // Enable response\r\n      response_allowed = true;\r\n      trial_start_time = performance.now();\r\n      stimulus_hidden = false;\r\n      \r\n      const responseButton = document.getElementById('nback-response-btn') as HTMLButtonElement;\r\n      responseButton.disabled = false;\r\n\r\n      // Set timeout to hide stimulus\r\n      stimulus_timeout = window.setTimeout(() => {\r\n        cell.style.backgroundColor = 'white';\r\n        stimulus_hidden = true;\r\n        \r\n        // Set timeout for ISI\r\n        isi_timeout = window.setTimeout(() => {\r\n          if (response_allowed && !response_given) {\r\n            handleNoResponse();\r\n          }\r\n        }, trial.isi_duration);\r\n      }, trial.stimulus_duration);\r\n    };\r\n\r\n    const handleResponse = (): void => {\r\n      if (!response_allowed || response_given) return;\r\n\r\n      response_allowed = false;\r\n      response_given = true;\r\n      const response_time = performance.now() - trial_start_time;\r\n      const is_correct = trial.is_target;\r\n\r\n      // Clear timeouts\r\n      clearTimeout(stimulus_timeout);\r\n      clearTimeout(isi_timeout);\r\n\r\n      // Show feedback with appropriate timing\r\n      showFeedback(is_correct, response_time, true);\r\n    };\r\n\r\n    const handleNoResponse = (): void => {\r\n      if (!response_allowed || response_given) return;\r\n\r\n      response_allowed = false;\r\n      response_given = true;\r\n      const is_correct = !trial.is_target;\r\n\r\n      showFeedback(is_correct, null, false);\r\n    };\r\n\r\n    const showFeedback = (is_correct: boolean, response_time: number | null, made_response: boolean): void => {\r\n      // If no feedback is shown, handle timing appropriately\r\n      if (!trial.show_feedback_time && !trial.show_feedback_border) {\r\n        if (made_response && !stimulus_hidden) {\r\n          // Response during stimulus - wait for stimulus + feedback duration, then ISI\r\n          const elapsed_time = performance.now() - trial_start_time;\r\n          const remaining_stimulus_time = Math.max(0, trial.stimulus_duration - elapsed_time);\r\n          const feedback_wait_time = remaining_stimulus_time + trial.feedback_duration;\r\n          \r\n          setTimeout(() => {\r\n            // Hide stimulus after the combined time\r\n            const cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\r\n            cell.style.backgroundColor = 'white';\r\n            \r\n            // Wait for ISI duration before ending trial\r\n            setTimeout(() => {\r\n              endTrial(is_correct, response_time, made_response);\r\n            }, trial.isi_duration);\r\n          }, feedback_wait_time);\r\n        } else {\r\n          // Response during ISI or no response - end immediately\r\n          endTrial(is_correct, response_time, made_response);\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Disable the button during feedback\r\n      const button = document.getElementById('nback-response-btn') as HTMLButtonElement;\r\n      button.disabled = true;\r\n      button.style.opacity = '0.6';\r\n\r\n      // Calculate total feedback duration based on when response occurred\r\n      let total_feedback_duration: number;\r\n      \r\n      if (made_response && !stimulus_hidden) {\r\n        // Response during stimulus - show feedback for stimulus + feedback duration\r\n        const elapsed_time = performance.now() - trial_start_time;\r\n        const remaining_stimulus_time = Math.max(0, trial.stimulus_duration - elapsed_time);\r\n        total_feedback_duration = remaining_stimulus_time + trial.feedback_duration;\r\n      } else if (made_response && stimulus_hidden) {\r\n        // Response during ISI - show feedback for remaining ISI + feedback duration\r\n        const elapsed_time = performance.now() - trial_start_time;\r\n        const isi_start_time = trial.stimulus_duration;\r\n        const elapsed_isi_time = elapsed_time - isi_start_time;\r\n        const remaining_isi_time = Math.max(0, trial.isi_duration - elapsed_isi_time);\r\n        total_feedback_duration = remaining_isi_time + trial.feedback_duration;\r\n      } else {\r\n        // No response - use standard feedback duration if configured\r\n        if (trial.feedbackWaitNoResponse) {\r\n          total_feedback_duration = trial.feedback_duration;\r\n        } else {\r\n          endTrial(is_correct, response_time, made_response);\r\n          return;\r\n        }\r\n      }\r\n\r\n      // If there is no response and feedback must not be shown for no response\r\n      if (response_time === null && !trial.showFeedbackNoResponse) {\r\n        if (trial.feedbackWaitNoResponse) {\r\n          setTimeout(() => {\r\n            endTrial(is_correct, response_time, made_response);\r\n          }, total_feedback_duration);\r\n        } else {\r\n          endTrial(is_correct, response_time, made_response);\r\n        }\r\n        return;\r\n      }\r\n      \r\n      // Initialize feedback elements\r\n      const grid = document.getElementById('nback-grid') as HTMLElement;\r\n      const feedback_div = document.getElementById('nback-feedback') as HTMLElement;\r\n      const stimulus_cell = document.getElementById(`cell-${stimulus_row}-${stimulus_col}`) as HTMLElement;\r\n\r\n      // Show border feedback immediately on the grid\r\n      if (trial.show_feedback_border) {\r\n        grid.style.border = `6px solid ${is_correct ? trial.correct_color : trial.incorrect_color}`;\r\n      }\r\n\r\n      // Show text feedback\r\n      if (trial.show_feedback_time) {\r\n        let feedback_text = is_correct ? 'Correct!' : 'Incorrect!';\r\n        if (response_time !== null) {\r\n          feedback_text += ` (${Math.round(response_time)}ms)`;\r\n        }\r\n        feedback_div.textContent = feedback_text;\r\n        feedback_div.style.color = is_correct ? trial.correct_color : trial.incorrect_color;\r\n      }\r\n\r\n      // Handle timing based on when response occurred\r\n      if (made_response && !stimulus_hidden) {\r\n        // Response during stimulus - keep border and stimulus until stimulus duration ends\r\n        const elapsed_time = performance.now() - trial_start_time;\r\n        const remaining_stimulus_time = Math.max(0, trial.stimulus_duration - elapsed_time);\r\n        \r\n        // Wait for remaining stimulus time, then hide stimulus but keep border\r\n        setTimeout(() => {\r\n          // Hide stimulus but keep the feedback border\r\n          stimulus_cell.style.backgroundColor = 'white';\r\n          \r\n          // Wait for feedback duration + ISI duration before ending trial\r\n          setTimeout(() => {\r\n            endTrial(is_correct, response_time, made_response);\r\n          }, trial.feedback_duration + trial.isi_duration);\r\n        }, remaining_stimulus_time);\r\n        \r\n      } else if (made_response && stimulus_hidden) {\r\n        // Response during ISI - stimulus already hidden, just wait for remaining time\r\n        const elapsed_time = performance.now() - trial_start_time;\r\n        const isi_start_time = trial.stimulus_duration;\r\n        const elapsed_isi_time = elapsed_time - isi_start_time;\r\n        const remaining_isi_time = Math.max(0, trial.isi_duration - elapsed_isi_time);\r\n        \r\n        setTimeout(() => {\r\n          endTrial(is_correct, response_time, made_response);\r\n        }, remaining_isi_time + trial.feedback_duration);\r\n        \r\n      } else {\r\n        // No response - just wait for feedback duration\r\n        setTimeout(() => {\r\n          endTrial(is_correct, response_time, made_response);\r\n        }, total_feedback_duration);\r\n      }\r\n    };\r\n\r\n    const endTrial = (is_correct: boolean, response_time: number | null, made_response: boolean): void => {\r\n      // Prepare trial data\r\n      const trial_data = {\r\n        stimulus_row: stimulus_row,\r\n        stimulus_col: stimulus_col,\r\n        is_target: trial.is_target,\r\n        response: made_response,\r\n        response_time: response_time,\r\n        correct: is_correct\r\n      };\r\n\r\n      // Clear display\r\n      display_element.innerHTML = '';\r\n\r\n      // End trial\r\n      this.jsPsych.finishTrial(trial_data);\r\n    };\r\n\r\n    // Initialize the trial\r\n    createDisplay();\r\n    startTrial();\r\n  }\r\n}\r\n\r\nexport default SpatialNbackTsPlugin;"],"names":[],"mappings":";;;EAEE,IAAW,OAAA,GAAA,OAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IC6HA,SAAA,EAAA;EAAA;;KAAe;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}